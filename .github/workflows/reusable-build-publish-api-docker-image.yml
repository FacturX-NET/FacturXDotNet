name: Reusable - Build & Publish API Docker Image

on:
  workflow_call:
    inputs:
      tag:
        description: (optional) A tag to associate with the new image
        type: string
        required: false
        default: ''
      version:
        description: The version of the application
        type: string
        required: true
      remove-old-tag:
        description: If true, the previous image tagged latest-{TAG} will be removed
        type: boolean
        default: false

    outputs:
      image_name:
        description: The name of the Docker Image that has been published
        value: ${{ jobs.build-publish-api-docker-image.outputs.image_name }}
      image_tag:
        description: The tag of the Docker Image that has been published
        value: ${{ jobs.build-publish-api-docker-image.outputs.image_tag }}
      image_id:
        description: The unique id (name:tag) of the Docker Image that has been published
        value: ${{ jobs.build-publish-api-docker-image.outputs.image_id }}

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  build-publish-api-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.push_image.outputs.image_name }}
      image_tag: ${{ steps.push_image.outputs.image_tag }}
      image_id: ${{ steps.push_image.outputs.image_id }}
    
    env:
      MINVERVERSIONOVERRIDE: ${{ inputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9 (for CycloneDX)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install CycloneDX
        run: dotnet tool install --global CycloneDX --framework net8.0

      - name: Generate licenses file
        run: cd src/FacturXDotNet.API; dotnet-CycloneDX FacturXDotNet.API.csproj -o Resources --json -fn api.bom.json

      - name: Build the Docker image
        run: cd src; docker build . --file FacturXDotNet.API/Dockerfile --tag facturxdotnet-api --label "runnumber=${GITHUB_RUN_ID}" --build-arg VERSION=${{ inputs.version }}

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: push_image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/facturxdotnet-api
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[A-Z]' '[a-z]' | tr '+' '.')
          VERSION=${{ inputs.version }}
          VERSION=$(echo $VERSION | tr '[A-Z]' '[a-z]' | tr '+' '.')
          
          docker tag facturxdotnet-api $IMAGE_NAME:$VERSION 
          docker push $IMAGE_NAME:$VERSION
          
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_tag=$VERSION" >> $GITHUB_OUTPUT
          echo "image_id=$IMAGE_NAME:$VERSION" >> $GITHUB_OUTPUT

      - name: Delete image from ghcr.io
        if: inputs.tag != '' && inputs.remove-old-tag
        continue-on-error: true
        uses: chipkent/action-cleanup-package@v1.0.1
        with:
          package-name: facturxdotnet-api
          tag: ${{ inputs.tag }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push ${{ inputs.tag }}
        if: inputs.tag != ''
        run: |
          docker tag facturxdotnet-api ${{ steps.push_image.outputs.image_name }}:${{ inputs.tag }} 
          docker push ${{ steps.push_image.outputs.image_name }}:${{ inputs.tag }}