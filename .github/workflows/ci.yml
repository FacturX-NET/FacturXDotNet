name: Build & Test

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  validate-pr-title:
    
    runs-on: ubuntu-latest
    
    steps:
      - name: PR Conventional Commit Validation
        uses: ytanikin/pr-conventional-commits@1.4.0
        with:
          task_types: '["ci","docs","test","example","sample","access","fix","feat","refactor","build","perf","revert","chore"]'
          custom_labels: |
            {
              "ci": "CI/CD", 
              "docs": "documentation", 
              "test": "test", 
              "example": "example", 
              "sample": "example", 
              "access": "accessibility", 
              "fix": "fix", 
              "feat": "feature", 
              "refactor": "refactor", 
              "build": "build", 
              "perf": "performance", 
              "revert": "revert", 
              "chore": "chore"
            }
          add_scope_label: 'true'
  
  build:

    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.0.x

      - name: Add System.CommandLine daily builds nuget source
        run: dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-libraries/nuget/v3/index.json --name "System.CommandLine - Daily Builds"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --logger trx --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            TestResults/**/*.xml
            !TestResults/**/*.cobertura*.xml
            TestResults/**/*.trx
            TestResults/**/*.json

      - name: Install dotnet-coverage
        run: dotnet tool install -g dotnet-coverage

      - name: Merge coverage files
        run: dotnet-coverage merge TestResults/**/*.cobertura.xml --output TestResults/coverage.cobertura.xml --output-format cobertura

      - name: Create coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Prepend title to coverage markdown
        run: sed -i '1s;^;## Coverage ;' code-coverage-results.md

      - name: Add Coverage as Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Add Coverage as Check Run
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Coverage
          conclusion: success
          output: |
            { "summary": "Code coverage report" }
          output_text_description_file: code-coverage-results.md

      - name: Add Coverage as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
