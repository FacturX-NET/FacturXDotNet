name: Continuous Integration - Main Build & Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  MINVERBUILDMETADATA: build.${{ github.run_id }}.${{ github.run_attempt}}

jobs:
  dotnet-releaser:
    name: Build, Test, Cover backend
    runs-on: ubuntu-latest
    
    permissions:
      actions: write
      contents: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9 (for dotnet-releaser, lib, and apps)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup .NET 8 (for minver-cli)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MinVer
        run: dotnet tool install -g minver-cli

      - name: Compute version
        id: compute_version
        run: |
          VERSION=$(minver -t v -v d)
          echo "Version is $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set version in dotnet-releaser config file
        run: |
          sed -i "s/Version = \"0.0.0\"/Version = \"${{ steps.compute_version.outputs.version }}\"/" src/dotnet-releaser.toml

      - name: Add System.CommandLine daily builds nuget source
        run: dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-libraries/nuget/v3/index.json --name "System.CommandLine - Daily Builds"

      - name: Build, Tests, Cover
        shell: bash
        env:
          MINVERVERSIONOVERRIDE: ${{ steps.compute_version.outputs.version }}
        run: |
          dotnet tool install --global dotnet-releaser
          cd src
          dotnet-releaser run --nuget-token "${{ secrets.NUGET_KEY }}" --github-token "${{ secrets.GITHUB_TOKEN }}" --skip-app-packages-for-build-only dotnet-releaser.toml

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: src/artifacts-dotnet-releaser
          if-no-files-found: 'error'
  
  build-and-test-frontend:
    name: Build frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8 (for minver-cli)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MinVer
        run: dotnet tool install -g minver-cli

      - name: Compute version
        id: compute_version
        run: |
          VERSION=$(minver -t v -v d)
          echo "Version is $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Compute date
        id: compute_date
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "Date is $DATE"
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          cache-dependency-path: 'src/FacturXDotNet.WebEditor/package-lock.json'

      - name: Install dependencies
        run: cd src/FacturXDotNet.WebEditor; npm ci

      - name: Dump licenses file
        run: cd src/FacturXDotNet.WebEditor; node scripts/dump-licenses.js

      - name: Setup environment
        run: |
          cd src/FacturXDotNet.WebEditor
          echo "import { Environment } from './environment.types';"                 > src/environments/environment.ts
          echo ""                                                                   >> src/environments/environment.ts
          echo "export const environment: Environment = {"                          >> src/environments/environment.ts
          echo "  version: '${{ steps.compute_version.outputs.version}}',"          >> src/environments/environment.ts
          echo "  buildDate: new Date('${{ steps.compute_date.outputs.date }}'),"   >> src/environments/environment.ts
          echo "  apiUrl: 'https://api.facturxdotnet.org',"                         >> src/environments/environment.ts
          echo "};"                                                                 >> src/environments/environment.ts
          echo "Environment is"
          cat src/environments/environment.ts

      - name: Build
        run: cd src/FacturXDotNet.WebEditor; npm run build --if-present

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: frontend-binaries
          path: src/FacturXDotNet.WebEditor/dist/facturxdotnet-webeditor
          if-no-files-found: 'error'
